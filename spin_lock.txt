
1. Algorithm of work. 

First of all we loop tightly without sleep for a while
and then if we wait too long, we need to sleep for a while.
We guess that 100 iterations of spinning would be good.
On a one-processor machine spinning is a complete waste of 
resources. On a multi-processor machine it is better to 
spin a little before sleep. It is because context-switching 
takes too much time. So that we examine the current situation
and adapt our spinning algorithm to single-processor or
multi-processor CPU.

2. Why the start iterations count is 100 and not 1?

There are some processors where the first several 
calls to InterlockedComparedExchange return 0. So that 
we need to do at least 100 calls.

3. Why do we need to sleep at random time?

The problem is that windows thread scheduler can set up
thread priorities and the threads with the lowest priority
should wait until someone from more prioritized threads
finishes its execution. When we use 1 msec as sleep time
there is a real possibility of starvation. 
 
4. How do we adapt to multi-processor CPU 
   or to sigle-processor CPU?
   
First of all we spin 100 times and then if we have not 
acquired a lock, we sleep for the first time for 1 msec
and then apply for the lock once more. If it fails we 
continue spinning 100 times and 
fall asleep once more but increase sleep time. 
So that we act as the rule:
The more we sleep the larger is sleep time. It continues 
until we reach max sleep time. When we reach max sleep 
count we report an error.
 
5. Why is volatile keyword necessary for spin lock?

First of all because InterlockedExchange requires 
a lock variable to be volatile.
Secondly to generate assembly code that will not use 
a processor's cache, but will always pull data from memory.
So without volatile keywoed we may get an infinite loop:
Infinite loop: 
  while (!lock) {}
  
  mov reg, mem
  loop 
    read register value  
  
 In this case the register variable will never be changed
 and we have got an infinite loop.
 When we use volatile keyword we always pull data from memory
  
 loop 
   mov reg, mem 
   read register value  

6. Adjusting spin lock strategy.

Spin lock manager accepts a ISpinLockStrategy interface. 

ISpinLockStrategy initLock(TSpinLock lock) method initializes 
lock. When we our spin lock strategy in classic SpinLockStrategy, 
we just set lock to 0. When we have our lock strategy SpinLockSemaphoreStrategy
we create a semaphore and set it to our lock.

ISpinLockStrategy tryLock(TSpinLock lock) method tries to apply a lock.
When we can't apply the lock we usually wait. When we have our lock strategy
set to SpinLockSemaphoreStrategy, tryLock method usually waits for the 
semaphore to get signalled. And when we successfully waited for the semaphore to
be signalled it automatically gets unsignalled and other backends have to wait.

ISpinLockStrategy delay() method is supplemental method for delay, that makes
the processor to do some additional optimization. 

ISpinLockStrategy unLock(TSpinLock lock) method releases the lock. When a backend
has been waiting for a semaphore to get signalled and finally gets signalled, the 
current backend gets control and semaphore becomes unsignalled. So other backends 
should wait. Unlock method calls ReleseSemaphore method that makes the semaphore 
signalled and someone else can acquire the lock.




 